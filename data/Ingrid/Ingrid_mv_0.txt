local t = {};

//-----------------------------------------------------------------------------
// jC
//-----------------------------------------------------------------------------

t.Mv_Atk_AirC <-
{
	function FrameUpdate_After()
	{
        Battle_Std.SetPattern_NotHoldButton( { ButtonMask=(1<<2), CheckFrameID=50, SetPattern="AirC_End" } );
    }	
}

t.Mv_Atk_Air2C <-
{
	function FrameUpdate_After()
	{
        Battle_Std.SetPattern_NotHoldButton( { ButtonMask=(1<<2), CheckFrameID=50, SetPattern="J2C_End" } );
    }	
}

t.Mv_Skill_SSRelayAtk <-
{
	function FrameUpdate_After()
    {
	}
}

t.Mv_MultiJump_F <- 
{
	function Init_After()
	{
		BMvTbl.SetMuki(_Direction_Auto );		
	}
}
t.Mv_MultiJump_N <- 
{
	function Init_After()
	{
		BMvTbl.SetMuki(_Direction_Auto );		
	}
}
t.Mv_MultiJump_B <- 
{
	function Init_After()
	{
		BMvTbl.SetMuki(_Direction_Auto );		
	}
}


t.Mv_Standby <- {};

//t.Mv_Atk_Air2B <- {};
t.Mv_Atk_Cro1A <- {};
t.Mv_Atk_Cro3B <- {};
t.Mv_Atk_Std6C <- {};
t.Mv_Atk_Std4B <- {};
t.Mv_Atk_Std4C <- {};



t.Mv_Skill_J236A <- {};

t.Mv_Skill_66B_Add6B <-
{
    flags = def_TmplFlags_Add,
    function Init_After()
    {
        BMvEff.PcAfterImage_Set( {  type=0, range=12, delay=4, color=0x8FAAAAFF, blendmode=0 } );
		Battle_Std.MoveCode.AddFlag( def_MC_EnableCansel_SkilltoSkill );
    }
    function LastUpdate()
    {
        BMvEff.PcAfterImage_Clear();
    }
};

t.Skill_DashStdA <- {};


t.Mv_Throw_F_Hit <-
{
	function Init_After()
	{
		Battle_Std.SetThrowEnemyMuteki( 254 );
	}
	function FrameUpdate_After()
	{
		switch( Battle_Std.GetUpdateFrameID() )
		{
		case 900:
            BMvEff.Slowmotion_Set( { time=15, power=5000 } );
			BMvEff.ThrowParam( { pat=330, x=235, y=0 } );
            BMvEff.SetCamera_Quake( { time=10, type=2, clear=0, } );
			BMvEff.ThrowRelease( { type="前転倒", airrecover=0, flags=0 } );
			break;
		case 1000: 
			Battle_Std.SetThrowEnemyMuteki( 0 );
			break;
		}
	}
}


t.Mv_Throw_A <-
{
	function HitInterrupt()
	{
		local enemy = BMvCore.GetNearEnemyCharaData();
		local isBMCapture = false;
		if( enemy.push() )
		{
			local hs = BtlMvStd.GetBoundStatus();
			isBMCapture = ((hs.isCapture&(1<<1))!=0);
			enemy.pop();
		}
		BMvTbl.SetLP(0,0); //コンボ投げかどうか
		if( isBMCapture ) BMvTbl.SetLP(0,1); //コンボでの投げ
		Battle_Std.SetThrowHitFinalize(256); // ヒット分岐ファイナライズ
	}	
}

t.Mv_Throw_A_Hit <- 
{
	function FrameUpdate_After() // 
	{			
		local s = BMvTbl.GetMvStatus(); // ステータス取得
		
		if( s.FrameID==30 )
		{
			local jumpid = ( BMvTbl.GetLP(0)==1 )? 60 : 50; //コンボ投げ : 生投げ
			BMvTbl.JumpFrameID(jumpid);
		}
		
		if( s.isFrameUpdate && ( s.FrameID == 50 || s.FrameID == 60 ) )
		{
			BMvEff.ThrowParam( { pattern = 324, x=160, y=60 } ); //位置を調整			
			BMvEff.ThrowRelease( { type="鋭角斜め下バウンド", airrecover=0, flags=_ThrowRelease_NoGroundRecover } ); //適当
		}
	}	
}


t.Mv_Skill_0202D <-
{
    function Finalize_After()
    {
        BMvEff.Cockpit_SetView( { mode=0 } );
    }
}

t.Mv_Atk_JB_JB <- {};

local maketmpl_236Series = function( param={} )
{
	local ret_tmpl = {};
	
	local mvparam =
	{
        vec = { x=0, y=0, addx=0, addy=0 },
		isEX = 0,
        mover = "Mv_FireBall_236A",
        patter = "FB_236",
        pos = { x=0, y=0 },
	}
	
	switch( param.type )
	{
	case "A":
		mvparam.vec.x = 1800;
        mvparam.mover = "Mv_FireBall_236A";
        mvparam.patter = "FB_236";
        mvparam.pos = { x=110, y=-220 }
		break;
	case "B":
		mvparam.vec.y = 1800;
        mvparam.mover = "Mv_FireBall_236B";
        mvparam.patter = "FB_236B";
        mvparam.pos = { x=110, y=-220 }
		break;
	case "C":
        mvparam.mover = "Mv_FireBall_236C";
        mvparam.patter = "FB_236B";
		mvparam.vec.x = 1800;
        mvparam.vec.y = 1800;
        mvparam.pos = { x=-30, y=-400 }
        break;
	case "EX":
        mvparam.mover = "Mv_FireBall_236EX";
		mvparam.vec.y = -1800;
		mvparam.isEX = 1;
        break;
	}


	ret_tmpl.FrameUpdate_After <- function() : (mvparam)
	{                
        switch( Battle_Std.GetUpdateFrameID() )
		{
		case 100:
		    local ball = Battle_Std.CreateFireBall( { x=mvparam.pos.x, y=mvparam.pos.y, mv=mvparam.mover, pat=mvparam.patter, angle=BMvEff.Random_Limit(10000), } );
			break;
		}
	}
	
	return ret_tmpl;
}

t.Mv_Skill_236A <- maketmpl_236Series( { type="A" } );
t.Mv_Skill_236B <- maketmpl_236Series( { type="B" } );
t.Mv_Skill_236C <- maketmpl_236Series( { type="C" } );


local maketmpl_236Ball = function( param={} )
{
	local ret_tmpl = {};
	
	local mvparam =
	{
        vec = { x=0, y=0, addx=0, addy=0 },
		isEX = 0,
	}
	
	switch( param.type )
	{
	case "A":
		mvparam.vec.x = 1800;
		break;
	case "B":
		mvparam.vec.y = 1800;
		break;
	case "C":
		mvparam.vec.x = 1800;
        mvparam.vec.y = 1800;
        break;
	case "EX":
		mvparam.vec.y = -1800;
		mvparam.isEX = 1;
        break;
	}


	ret_tmpl.FrameUpdate_After <- function() : (mvparam)
	{                

	}
	
	return ret_tmpl;
}

t.Mv_FireBall_236A <- maketmpl_236Ball( { type="A" } );
t.Mv_FireBall_236B <- maketmpl_236Ball( { type="B" } );
t.Mv_FireBall_236C <- maketmpl_236Ball( { type="C" } );



local pw = 40;

t.Mv_FireBall_236A <- {
  
    function Init_After()
    {
    BMvTbl.SetVector( { x=3000, y=0, addx=-130, flags = _Vector_Normal } );
    Battle_Std.PlayerSE_Play( 220 );
    }
    
    function FrameUpdate_After()
    {
  
        local mvs = BMvTbl.GetMvStatus();
        if( mvs.MvCount >= 200 )
        {
            Battle_Std.InitVector();
            BMvTbl.SetPattern( 837 );
        }
        
        switch( Battle_Std.GetUpdateFrameID() )
        {
        case 0:
        
        	if( Battle_Std.CheckPlayerisDamage( 1 ) ) BMvTbl.JumpFrameID(130); //Disappear if you get hit!
                        
            BMvTbl.SetVector({ addx = 0, addy = 0, flags = _Vector_Normal});
            
            
            local player = BMvCore.GetPlayerCharaData();
            if (player.push()) {
                local stick = BMvTbl.GetStickHold();
                player.pop();
                
                // Keep the orientation the same. Thanks Tsurugi!
                local oya = BMvCore.GetParentCharaData();
                if( oya.push() )
                {
                    local muki = BMvTbl.GetMuki();
                    oya.pop();
                    
                    local set_muki = ( muki == 1 )? _Direction_Right : _Direction_Left;
                    BMvTbl.SetMuki( set_muki );
                }

                local vec_x = 0;
                if( stick == 9 || stick == 6 || stick == 3 ) vec_x =  70;
                if( stick == 7 || stick == 4 || stick == 1 ) vec_x = -70;

                BMvTbl.SetVector( { x=vec_x, addx=0, flags=_Vector_Normal|_VecFlag_Add } );

            }
        }
    }
};


//TODO Template all this. This is super horrible but i am going to waste so much time optimizing at my skill level



t.Mv_FireBall_236B <- {

    function Init_After()
    {
    BMvTbl.SetVector( { x=500, y=-2600, addx=0, addy=120, flags = _Vector_Normal } );
    //    BMvTbl.SetVector( { x=1000, y=-2700, addx=-20, addy=120, flags = _Vector_Normal } );

    }
    
    function FrameUpdate_After()
    {
  
        local mvs = BMvTbl.GetMvStatus();
        if( mvs.MvCount >= 300 )
        {
            Battle_Std.InitVector();
            BMvTbl.JumpFrameID( 130 );
            BMvTbl.SetFinalize(0);
        }
        
        switch( Battle_Std.GetUpdateFrameID() )
        {
        case 0:
            if( Battle_Std.CheckPlayerisDamage( 1 ) ) BMvTbl.JumpFrameID(130); //Disappear if you get hit!

        
            BMvTbl.SetVector({ addx = 0, addy = 0, flags = _Vector_Normal});
            
            local player = BMvCore.GetPlayerCharaData();
            if (player.push()) {
                local stick = BMvTbl.GetStickHold();
                player.pop();
                
                // Keep the orientation the same. Thanks Tsurugi!
                local oya = BMvCore.GetParentCharaData();
                if( oya.push() )
                {
                    local muki = BMvTbl.GetMuki();
                    oya.pop();
                    
                    local set_muki = ( muki == 1 )? _Direction_Right : _Direction_Left;
                    BMvTbl.SetMuki( set_muki );
                }
                
                local vec_y = 0;
                if( stick == 7 || stick == 8 || stick == 9 ) vec_y = -80;
                if( stick == 1 || stick == 2 || stick == 3 ) vec_y =  80;
		
                BMvTbl.SetVector( { y=vec_y, addy=0, flags=_Vector_Normal|_VecFlag_Add } );

            }
        }
    }
};

t.Mv_FireBall_236C <- {
    
    function Init_After()
    {
    BMvTbl.SetVector( { x=-2000, y=2000, addx=100, addy=-100, flags = _Vector_Normal } );
    }
    
    function FrameUpdate_After()
    {
        if( Battle_Std.CheckPlayerisDamage( 1 ) ) BMvTbl.JumpFrameID(130); //Disappear if you get hit!
    
        local mvs = BMvTbl.GetMvStatus();
        if( mvs.MvCount >= 200 )
        {
            Battle_Std.InitVector();
            BMvTbl.SetPattern(837);
            BMvTbl.SetFinalize(0);
        }

        switch( Battle_Std.GetUpdateFrameID() )
        {
        case 0:
            BMvTbl.SetVector({ addx = 0, addy = 0, flags = _Vector_Normal});
            
            local player = BMvCore.GetPlayerCharaData();
            if (player.push()) {
                local stick = BMvTbl.GetStickHold();
                player.pop();
                
                // Keep the orientation the same. Thanks Tsurugi!
                local oya = BMvCore.GetParentCharaData();
                if( oya.push() )
                {
                    local muki = BMvTbl.GetMuki(); // Get direction
                    oya.pop();
                    
                    local set_muki = ( muki == 1 )? _Direction_Right : _Direction_Left; //If parent is 1 (6), R (6), if 0 (4), L (4 )
                    BMvTbl.SetMuki( set_muki );
                }

                local vec_x = 0;
                if( stick == 9 || stick == 6 || stick == 3 ) vec_x =  50;
                if( stick == 7 || stick == 4 || stick == 1 ) vec_x = -50;
                
                local vec_y = 0;
                if( stick == 7 || stick == 8 || stick == 9 ) vec_y = -50;
                if( stick == 1 || stick == 2 || stick == 3 ) vec_y =  50;
                
                BMvTbl.SetVector( { x=vec_x, addx=0, y=vec_y, addy=0, flags=_Vector_Normal|_VecFlag_Add } );
            
            }
        }
    }
};


t.Mv_Skill_236236EX <-
{
	function FrameUpdate_After()
	{                
        switch( Battle_Std.GetUpdateFrameID() )
		{
		case 100:
		    local ball = Battle_Std.CreateFireBall( { x=100, y=-220, mv="Mv_FireBall_236EX", pat="FB_236EX"} );
			break;
		}
	}
}



t.Mv_FireBall_236EX <- {

    function FrameUpdate_After()
    {

        switch( Battle_Std.GetUpdateFrameID() )
        {
        case 0:
            BMvTbl.SetVector({ addx = 0, addy = 0, flags = _Vector_Normal});
            
            local player = BMvCore.GetPlayerCharaData();
            if (player.push()) {
                local stick = BMvTbl.GetStickHold();
                player.pop();
                
                //I don't think we need to keep muki

                local vec_x = 0;
                if( stick == 9 || stick == 6 || stick == 3 ) vec_x =  15;                
                local vec_y = 0;
                if( stick == 7 || stick == 8 || stick == 9 ) vec_y = -5;
                if( stick == 1 || stick == 2 || stick == 3 ) vec_y =  5;
                
                BMvTbl.SetVector( { x=vec_x, addx=0, y=vec_y, addy=0, flags=_Vector_Normal|_VecFlag_Add } );
            
            }
        }
    }
    
    function Blocked()
	{
        Battle_Std.InitVector();
		BMvTbl.JumpFrameID( 130 );
	}
    
};

t.Mv_FireBall_Hit <-
{
	function Init_After()
	{
        Battle_Std.InitVector();
		BMvTbl.JumpFrameID( 130 );
	}
}

t.Mv_FireBall_236A_Sousai  <- t.Mv_FireBall_Hit;
t.Mv_FireBall_236A_Blocked <- t.Mv_FireBall_Hit;

t.Mv_FireBall_236B_Hit     <- t.Mv_FireBall_Hit;
t.Mv_FireBall_236B_Sousai  <- t.Mv_FireBall_Hit;
t.Mv_FireBall_236B_Blocked <- t.Mv_FireBall_Hit;

t.Mv_FireBall_236C_Hit     <- t.Mv_FireBall_Hit;
t.Mv_FireBall_236C_Sousai  <- t.Mv_FireBall_Hit;
t.Mv_FireBall_236C_Blocked <- t.Mv_FireBall_Hit;

t.Mv_FireBall_236EX_Hit     <-
{
	function Init_After()
	{
        Battle_Std.InitVector();
		BMvTbl.JumpFrameID( 130 );
        //BMvEff.SetCamera_Quake( { time=23, type=2, clear=0, } ); //h, v, both
        //BMvEff.Slowmotion_Set( { time=60, power=6666 } ); //I wanna make it 60 for giggles, but how do we seperate it from blocked?
	}
    

};

t.Mv_FireBall_236EX_Sousai  <- t.Mv_FireBall_Hit;


t.Mv_Atk_StdBandC <-
{
	function Init_After()
	{
		BMvTbl.ClearHitStatus(); //ヒット情報初期化
		BMvEff.SetPlayerTimer( { muteki_nage=0, muteki_nageX=0 } ); //投げ無敵を消す
		// 汎用判定00使用、12F
		BMvTbl.SetAtkCatchFlag( { hantei=5, catch_flags=_CatchFlag_AtkAllGuard|_CatchFlag_Invalid_Through_ExceptBound/*_CatchFlag_AtkStandGuard|_CatchFlag_AtkStandShield*/, success_flags=_CatchSuccess_HitSub|_CatchSuccess_HitSub_Enemy|_CatchSuccess_FlagHit_Enemy, time=20, flag=_ClearFlag_ChangePattern|_ClearFlag_ChangeMv } );
		BMvTbl.SetLP(9,0); // 0:相殺できる 1:相殺できない ※HitInterruptで1になる
		
		BMvTbl.SetLP(0,0); //当身とったかどうか
		BMvTbl.SetLP(1,0); //当身とった回数（最大とれる回数制限用）
		BMvTbl.SetLP(2,0); //下段に対して当身をとったかどうか
		BMvTbl.SetLP(4,0); //飛び道具を取って行動可能にするかどうか
		
		Battle_Std.MoveCodeEx.AddFlag( 1, def_MC1_ChainShiftOK ); // 空振りCS可能
		Battle_Std.MoveCodeEx.AddFlag( 7, def_MC7_NoMutekiAnnounce ); // 当身成立直後の判定が無敵なのでアナウンスなし
		
		// if( mvparam.cs_anten_up && Battle_Std.MoveCodeEx.CheckFlag( 1, def_MC1_CSAntenGaesiSkill ) )
		// {
			// // _dp("\n CS後に出したので発生1Fに変更");
			// BMvTbl.JumpFrameID(15);//当身判定のフレームへ
		// }

	}
	
	function FrameUpdate_After()
	{
		if( BMvTbl.GetLP(4)==1 ) //飛び道具をとった後
		{
			//硬直部分は行動可能にしてしまう 毎フレ上書き
			BMvTbl.SetMoveableFlag( { move=1, time=6, flag=_ClearFlag_ChangeFrame|_ClearFlag_ChangePattern|_ClearFlag_ChangeMv } );
		}
		
		BMvTbl.SetAtkCatchFlag( { hantei=5, catch_flags=_CatchFlag_AtkAllGuard|_CatchFlag_Invalid_Through_ExceptBound/*_CatchFlag_AtkStandGuard|_CatchFlag_AtkStandShield*/, success_flags=_CatchSuccess_HitSub|_CatchSuccess_HitSub_Enemy|_CatchSuccess_FlagHit_Enemy, time=20, flag=_ClearFlag_ChangePattern|_ClearFlag_ChangeMv } );
		
		BMvTbl.SetLP(9,0);
		
		switch( Battle_Std.GetUpdateFrameID() )
		{
		case 400: // 通常
			break;
		case 600: // キャッチ判定空振り後
			// 反撃できないんだけど！？注意してね…
			if( BMvTbl.GetLP(1)<3 )
			{
				// 回数制限
				BMvTbl.SetLP(0,0); // 当身成功を一回消す
			}
			break;
		}
				//BMvEff.SetCamera_Focus( { charapos=0, zoom=-0.1, time=[10,40-10,15], type_in=3, type_out=1, x=0, y=0 } ); //?J???‰?W’†

	}
	
	
	
	function HitInterrupt_After()
	{

		Battle_Std.SetThrowHitFinalize(256);

		//当身処理
		if( BMvTbl.GetLP(0)==0 )
		{
			//まだ当身処理前
			// local atemi_param = 
			// {
				// normal =
				// {
					// hitstop = 18, // ヒットストップ
					// pat = mvparam.hitPat,
				// },
				// ball =
				// {
					// hitstop = 16, // ヒットストップ
					// pat = 0,//パターン変更しない
				// },
				// eff = 
				// {
					// effPat = mvparam.catchEff,
				// }
			// }
			
			// local ret = atemi_check( atemi_param );

			BMvTbl.SetLP(4,0); // 飛び道具をとったかどうか
			
			// if( ret == 100 )
			// {
				// BMvTbl.SetLP(4,1); // 飛び道具とった。後で行動可能にする
			// }

			BMvTbl.SetLP(0,1); // とったフラグをたてて、何度も入らないようにする
			BMvTbl.AddLP(1,1); // とった回数を増やす。何回もとったら当身成功を終わらせる
			BMvTbl.SetPattern(66);

		}
		
	}
	
	
	//Finalize
	function Finalize()
	{
		Battle_Std.SwitchNextMoveTable("Mv_Neutral",[256,"Mv_Atk_BCParry"]); //デフォ,[code,mv]...

	}
	
}

t.Mv_Atk_BCParry <-
{
	function Init_After()
	{

	}
	
	function FrameUpdate_After()
	{
						BMvEff.AttackInfoString_Set({ word = "NICE" });

	}

}

t.Mv_Skill_623A <- {};


INGRID_MoveTable <- Battle_Std.MakeMoveTable( t, INGRID_CommandTable, Def_ChrNo_Ing );
__dofile__("./data/Ingrid/Ingrid_se_category.txt"); //ＳＥ定義
